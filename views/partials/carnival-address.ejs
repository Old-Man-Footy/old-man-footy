<%
/**
 * Clickable Carnival Address Partial
 * Displays carnival location as a clickable link to Google Maps
 * Uses locationAddressPart1-4 fields when available, falls back to locationAddress
 * 
 * Required locals:
 * - carnival: Carnival object with location data
 * 
 * Optional locals:
 * - addressClass: CSS classes for styling (default: '')
 * - showIcon: Whether to show map icon (default: true)
 * - target: Link target (default: '_blank')
 * - truncate: Maximum characters before truncation (default: null - no truncation)
 * - layout: 'multiline' for structured display or 'inline' for single line (default: 'multiline')
 */

// Set defaults
const addressClass = locals.addressClass || '';
const showIcon = locals.showIcon !== false;
const target = locals.target || '_blank';
const truncate = locals.truncate || null;
const layout = locals.layout || 'multiline';

// Build address parts array from stored fields
const addressParts = [
    carnival.locationAddressPart1,
    carnival.locationAddressPart2,
    carnival.locationAddressPart3,
    carnival.locationAddressPart4
].filter(part => part && part.trim().length > 0);

// Determine which address data to use
let displayParts = [];
let fullAddressForMaps = '';
let hasStructuredParts = false;

if (addressParts.length > 0) {
    // Use structured address parts
    displayParts = addressParts;
    fullAddressForMaps = addressParts.join(', ');
    hasStructuredParts = true;
} else if (carnival.locationAddress && carnival.locationAddress.trim().length > 0) {
    // Fall back to main address field
    displayParts = [carnival.locationAddress.trim()];
    fullAddressForMaps = carnival.locationAddress.trim();
} else {
    // No address data available
%>
    <span class="text-muted <%= addressClass %>">
        <% if (showIcon) { %><i class="bi bi-geo-alt me-1"></i><% } %>
        Location not specified
    </span>
<%
    return;
}

// Build Google Maps URL
const googleMapsUrl = `https://maps.google.com/maps?q=${encodeURIComponent(fullAddressForMaps)}`;

// Handle truncation for inline display
let displayAddress = fullAddressForMaps;
if (layout === 'inline' && truncate && fullAddressForMaps.length > truncate) {
    displayAddress = fullAddressForMaps.substring(0, truncate) + '...';
}
%>
    <a href="<%= googleMapsUrl %>" 
       target="<%= target %>" 
       class="text-decoration-none <%= addressClass %>"
       title="View <%= fullAddressForMaps %> on Google Maps"
       rel="noopener noreferrer">
        <% if (showIcon) { %><i class="bi bi-geo-alt me-1"></i><% } %>
        
        <% if (layout === 'multiline' && hasStructuredParts && !truncate) { %>
            <!-- Structured multiline address display -->
            <span class="d-block fw-semibold"><%= displayParts[0] %></span>
            <% if (displayParts.length > 1) { %>
                <% displayParts.slice(1).forEach(part => { %>
                    <span class="d-block text-muted small"><%= part %></span>
                <% }); %>
            <% } %>
        <% } else { %>
            <!-- Single line address display -->
            <%= layout === 'inline' ? displayAddress : fullAddressForMaps %>
        <% } %>
    </a>