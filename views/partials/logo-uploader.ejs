<%
/*
 * Logo Uploader Partial
 * 
 * A reusable logo uploader component with preview and drag-and-drop functionality.
 * 
 * Required parameters:
 * - fieldName: The name attribute for the file input (e.g., 'logo', 'logoFile')
 * - uploadText: Text to display for upload prompt (e.g., 'Click or drag to upload club logo')
 * - maxFileSize: Maximum file size description (e.g., 'Max 10MB')
 * - acceptedFormats: Accepted file formats description (e.g., 'JPG/PNG/SVG/GIF/WebP')
 * - helpText: Additional help text for the upload
 * 
 * Optional parameters:
 * - currentLogoUrl: URL of existing logo (if any)
 * - currentLogoAlt: Alt text for current logo (defaults to 'Current Logo')
 * - inputId: Custom ID for the file input (defaults to fieldName)
 * - acceptAttribute: Custom accept attribute (defaults to standard image formats)
 */

// Set defaults
const logoFieldName = locals.fieldName || 'logo';
const logoInputId = locals.inputId || logoFieldName;
const logoUploadText = locals.uploadText || 'Click or drag to upload logo';
const logoMaxFileSize = locals.maxFileSize || 'Max 10MB';
const logoAcceptedFormats = locals.acceptedFormats || 'JPG/PNG/SVG/GIF/WebP';
const logoHelpText = locals.helpText || 'Upload a logo image. Recommended size: 200x200 pixels or larger, square format.';
// Support both parameter names for backward compatibility
const logoCurrentUrl = locals.currentImageUrl || locals.currentLogoUrl || locals.existingLogoUrl || '';
const logoCurrentAlt = locals.currentLogoAlt || locals.existingLogoName || 'Current Logo';
const logoAcceptAttribute = locals.acceptAttribute || 'image/jpeg,image/jpg,image/png,image/gif,image/svg+xml,image/webp';
%>

<div class="row align-items-center">
    <div class="col-md-3">
        <div id="<%= logoInputId %>-preview-container">
            <% if (logoCurrentUrl) { %>
                <div class="card">
                    <img src="<%= logoCurrentUrl %>" 
                         class="card-img-top logo-preview-image" 
                         alt="<%= logoCurrentAlt %>" 
                         id="<%= logoInputId %>-current-preview">
                    <div class="card-body text-center p-2">
                        <small class="text-muted"><%= logoCurrentAlt %></small>
                    </div>
                </div>
            <% } else { %>
                <div class="card" id="<%= logoInputId %>-no-logo-card">
                    <div class="card-body text-center logo-uploader-no-logo">
                        <div>
                            <i class="bi bi-image display-6 text-muted"></i>
                            <div class="mt-2">
                                <small class="text-muted">No logo uploaded</small>
                            </div>
                        </div>
                    </div>
                </div>
            <% } %>
        </div>
    </div>
    <div class="col-md-9">
        <label for="<%= logoInputId %>" class="form-label">
            <% if (logoCurrentUrl) { %>
                Upload New Logo
            <% } else { %>
                Upload Logo
            <% } %>
        </label>
        <div class="file-upload-area mb-3" id="<%= logoInputId %>-upload-area">
            <input type="file" 
                   class="form-control d-none" 
                   id="<%= logoInputId %>" 
                   name="<%= logoFieldName %>" 
                   accept="<%= logoAcceptAttribute %>">
            <i class="bi bi-cloud-upload display-6 text-muted"></i>
            <p class="upload-text mt-2" id="<%= logoInputId %>-upload-text"><%= logoUploadText %></p>
            <small class="text-muted"><%= logoMaxFileSize %>, <%= logoAcceptedFormats %></small>
        </div>
        <div class="form-text">
            <%= logoHelpText %>
        </div>
    </div>
</div>

<script>
(function() {
    'use strict';
    
    const logoUploaderManager = {
        elements: {},
        inputId: '<%= logoInputId %>',
        
        initialize() {
            this.cacheElements();
            this.bindEvents();
        },
        
        cacheElements() {
            this.elements.fileInput = document.getElementById(this.inputId);
            this.elements.uploadArea = document.getElementById(this.inputId + '-upload-area');
            this.elements.uploadText = document.getElementById(this.inputId + '-upload-text');
            this.elements.previewContainer = document.getElementById(this.inputId + '-preview-container');
            this.elements.currentPreview = document.getElementById(this.inputId + '-current-preview');
            this.elements.noLogoCard = document.getElementById(this.inputId + '-no-logo-card');
        },
        
        bindEvents() {
            if (!this.elements.fileInput || !this.elements.uploadArea) return;
            
            // Click to upload
            this.elements.uploadArea.addEventListener('click', () => {
                this.elements.fileInput.click();
            });
            
            // File selection handler
            this.elements.fileInput.addEventListener('change', (e) => {
                this.handleFileSelect(e);
            });
            
            // Drag and drop handlers
            ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
                this.elements.uploadArea.addEventListener(eventName, this.preventDefaults, false);
            });
            
            ['dragenter', 'dragover'].forEach(eventName => {
                this.elements.uploadArea.addEventListener(eventName, () => {
                    this.elements.uploadArea.classList.add('drag-over');
                }, false);
            });
            
            ['dragleave', 'drop'].forEach(eventName => {
                this.elements.uploadArea.addEventListener(eventName, () => {
                    this.elements.uploadArea.classList.remove('drag-over');
                }, false);
            });
            
            this.elements.uploadArea.addEventListener('drop', (e) => {
                this.handleDrop(e);
            }, false);
        },
        
        handleFileSelect(e) {
            const file = e.target.files[0];
            if (file) {
                this.updateUploadText(`Selected: ${file.name}`);
                this.elements.uploadArea.classList.add('file-selected');
                this.showPreview(file);
            } else {
                this.resetUploadText();
                this.elements.uploadArea.classList.remove('file-selected');
            }
        },
        
        handleDrop(e) {
            const files = e.dataTransfer.files;
            if (files.length > 0) {
                this.elements.fileInput.files = files;
                // Trigger change carnival to run handleFileSelect logic
                this.elements.fileInput.dispatchEvent(new Carnival('change', { bubbles: true }));
            }
        },
        
        showPreview(file) {
            if (!file || !file.type.startsWith('image/')) return;
            
            const reader = new FileReader();
            reader.onload = (e) => {
                // Create new preview or update existing
                let previewCard = this.elements.previewContainer.querySelector('.card');
                
                if (!previewCard) {
                    // Create new card if none exists
                    previewCard = document.createElement('div');
                    previewCard.className = 'card';
                    this.elements.previewContainer.appendChild(previewCard);
                }
                
                previewCard.innerHTML = `
                    <img src="${e.target.result}" 
                         class="card-img-top logo-preview-image" 
                         alt="Preview of selected logo">
                    <div class="card-body text-center p-2">
                        <small class="text-muted">New Logo Preview</small>
                    </div>
                `;
                
                // Hide the no-logo placeholder if it exists
                if (this.elements.noLogoCard) {
                    this.elements.noLogoCard.classList.add('d-none');
                }
            };
            reader.readAsDataURL(file);
        },
        
        updateUploadText(text) {
            if (this.elements.uploadText) {
                this.elements.uploadText.textContent = text;
            }
        },
        
        resetUploadText() {
            if (this.elements.uploadText) {
                this.elements.uploadText.textContent = '<%= logoUploadText %>';
            }
        },
        
        preventDefaults(e) {
            e.preventDefault();
            e.stopPropagation();
        }
    };
    
    // Initialize when DOM is ready
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', () => {
            logoUploaderManager.initialize();
        });
    } else {
        logoUploaderManager.initialize();
    }
})();
</script>
