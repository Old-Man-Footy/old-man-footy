version: '3.8'

services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: old-man-footy-prod
    ports:
      - "3060:3060"
    environment:
      - NODE_ENV=production
      - SESSION_SECRET=${SESSION_SECRET}
      - EMAIL_SERVICE=${EMAIL_SERVICE}
      - EMAIL_PASS=${EMAIL_PASS}
      - EMAIL_USER=${EMAIL_USER}
      - SESSION_STORE=redis
      - REDIS_URL=${REDIS_URL}
      - SENTRY_DSN=${SENTRY_DSN}
      - GA_TRACKING_ID=${GA_TRACKING_ID}
      - APPINSIGHTS_INSTRUMENTATIONKEY=${APPINSIGHTS_INSTRUMENTATIONKEY}
      - EMAIL_FROM=noreply@oldmanfooty.au
      - EMAIL_FROM_NAME="Old Man Footy"
      - SSL_CERT_PATH={SSL_CERT_PATH}
      - SSL_KEY_PATH={SSL_KEY_PATH}
      - PORT=3060
    volumes:
      # Persist database and uploads only
      - prod_data:/app/data
      - prod_uploads:/app/public/uploads
    networks:
      - old-man-footy-network
    restart: always
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3060/health', (res) => process.exit(res.statusCode === 200 ? 0 : 1)).on('error', () => process.exit(1))"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
      - /var/cache
      - /var/log

volumes:
  prod_data:
    driver: local
  prod_uploads:
    driver: local

networks:
  old-man-footy-network:
    driver: bridge