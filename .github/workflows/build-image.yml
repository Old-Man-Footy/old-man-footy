name: Build and Push Docker Images (test + prod) to GHCR

on:
  push:
    branches: [ main ] # Or your default branch, e.g., master
  # You can also trigger on other events, like pull requests or releases
  # pull_request:
  #   branches: [ main ]

env:
  # Define your image name.
  # It's good practice to use your GitHub username (or org name) and repo name.
  IMAGE_NAME: ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}

jobs:
  build-and-push:
    name: Build and Push test/prod Images
    runs-on: ubuntu-latest # Use the latest GitHub-hosted Linux runner

    permissions:
      contents: read      # To read repository contents (checkout)
      packages: write     # To push packages (Docker images) to GHCR
      # id-token: write  # Uncomment if you need to authenticate to a cloud provider

    concurrency:
      group: build-image-${{ github.workflow }}-${{ github.ref }}
      cancel-in-progress: true

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.1.4 # Fetches your repository code

      - name: Set up QEMU (for multi-arch builds)
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3.1.0
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }} # Your GitHub username or organization
          password: ${{ secrets.GITHUB_TOKEN }}    # GITHUB_TOKEN is automatically generated

      # Metadata for TEST image tags/labels
      - name: Extract Docker metadata (test)
        id: meta_test
        uses: docker/metadata-action@v5.5.1
        with:
          images: ${{ env.IMAGE_NAME }}
          # Generates tags like:
          # type=sha,prefix=,suffix=,format=short (short git SHA)
          # type=ref,event=branch (branch name, e.g., main)
          # type=ref,event=tag (git tag name)
          # type=semver,pattern={{version}} (if you use git tags like v1.0.0)
          # For simple use, pushing with 'latest' and git SHA is common
          tags: |
            type=raw,value=test
            type=sha,prefix=test-,suffix=,format=short
            type=edge,branch=main  # main branch builds also get the 'edge' tag for test images
            # If you push a git tag like v1.2.3, it will create a Docker tag v1.2.3
            type=ref,event=tag

      - name: "Build and push TEST image (target: test)"
        uses: docker/build-push-action@v6
        with:
          context: . # Path to the directory containing your Dockerfile ('.' is the root)
          target: test
          push: ${{ github.event_name != 'pull_request' }} # Push only on direct pushes, not on PRs by default
          tags: ${{ steps.meta_test.outputs.tags }}
          labels: ${{ steps.meta_test.outputs.labels }}
          platforms: linux/amd64,linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Metadata for PRODUCTION image tags/labels
      - name: Extract Docker metadata (prod)
        id: meta_prod
        uses: docker/metadata-action@v5.5.1
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=prod
            type=sha,prefix=prod-,suffix=,format=short
            # If you push a git tag like v1.2.3, it will create a Docker tag v1.2.3
            type=ref,event=tag
            # For the main branch, also tag as 'latest'
            ${{ github.ref == format('refs/heads/{0}', 'main') && 'type=raw,value=latest' || '' }}

      - name: "Build and push PRODUCTION image (target: production)"
        uses: docker/build-push-action@v6
        with:
          context: .
          target: production
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta_prod.outputs.tags }}
          labels: ${{ steps.meta_prod.outputs.labels }}
          platforms: linux/amd64,linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max
